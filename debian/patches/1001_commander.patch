Description: support node module commander release 9
 This patch changes option parsing
 to be compatible with NodeJS module commander v9
 (and possibly v7 and v8 as well),
 at the expense of compatibility with older releases of commander.
Author: Yadd <yadd@debian.org>
Bug-Debian: https://bugs.debian.org/963425
Bug-Debian: https://bugs.debian.org/1003039
Bug-Debian: https://bugs.debian.org/1011816
Last-Update: 2022-06-25
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/lib/cli.js
+++ b/lib/cli.js
@@ -26,6 +26,15 @@
     program.parseArgv = program.parse;
     program.parse = undefined;
 
+    var argv = [];
+    process.argv.forEach(function(arg){
+      if(arg.match(/^-([pcmbode]+)$/)) {
+        argv = argv.concat(RegExp.$1.split('').map(s => { return '-'+s }));
+      }
+      else argv.push(arg);
+    });
+    process.argv = argv;
+    
     if (process.argv.includes("ast")) program.helpInformation = describe_ast;
     else if (process.argv.includes("options")) program.helpInformation = function() {
         var text = [];
@@ -62,10 +71,11 @@
     program.option("--toplevel", "Compress and/or mangle variables in toplevel scope.");
     program.option("--wrap <name>", "Embed everything as a function with “exports” corresponding to “name” globally.");
     program.arguments("[files...]").parseArgv(process.argv);
-    if (program.configFile) {
-        options = JSON.parse(read_file(program.configFile));
+    const opts = program.opts();
+    if (opts.configFile) {
+        options = JSON.parse(read_file(opts.configFile));
     }
-    if (!program.output && program.sourceMap && program.sourceMap.url != "inline") {
+    if (!opts.output && opts.sourceMap && opts.sourceMap.url != "inline") {
         fatal("ERROR: cannot write source map to STDOUT");
     }
 
@@ -80,76 +90,76 @@
         "toplevel",
         "wrap"
     ].forEach(function(name) {
-        if (name in program) {
-            options[name] = program[name];
+        if (name in opts) {
+            options[name] = opts[name];
         }
     });
 
-    if ("ecma" in program) {
-        if (program.ecma != (program.ecma | 0)) fatal("ERROR: ecma must be an integer");
-        const ecma = program.ecma | 0;
+    if ("ecma" in opts && opts.ecma != undefined) {
+        if (opts.ecma != (opts.ecma | 0)) fatal("ERROR: ecma must be an integer");
+        const ecma = opts.ecma | 0;
         if (ecma > 5 && ecma < 2015)
             options.ecma = ecma + 2009;
         else
             options.ecma = ecma;
     }
-    if (program.format || program.beautify) {
-        const chosenOption = program.format || program.beautify;
+    if (opts.format || opts.beautify) {
+        const chosenOption = opts.format || opts.beautify;
         options.format = typeof chosenOption === "object" ? chosenOption : {};
     }
-    if (program.comments) {
+    if (opts.comments) {
         if (typeof options.format != "object") options.format = {};
-        options.format.comments = typeof program.comments == "string" ? (program.comments == "false" ? false : program.comments) : "some";
+        options.format.comments = typeof opts.comments == "string" ? (opts.comments == "false" ? false : opts.comments) : "some";
     }
-    if (program.define) {
+    if (opts.define) {
         if (typeof options.compress != "object") options.compress = {};
         if (typeof options.compress.global_defs != "object") options.compress.global_defs = {};
-        for (var expr in program.define) {
-            options.compress.global_defs[expr] = program.define[expr];
+        for (var expr in opts.define) {
+            options.compress.global_defs[expr] = opts.define[expr];
         }
     }
-    if (program.keepClassnames) {
+    if (opts.keepClassnames) {
         options.keep_classnames = true;
     }
-    if (program.keepFnames) {
+    if (opts.keepFnames) {
         options.keep_fnames = true;
     }
-    if (program.mangleProps) {
-        if (program.mangleProps.domprops) {
-            delete program.mangleProps.domprops;
+    if (opts.mangleProps) {
+        if (opts.mangleProps.domprops) {
+            delete opts.mangleProps.domprops;
         } else {
-            if (typeof program.mangleProps != "object") program.mangleProps = {};
-            if (!Array.isArray(program.mangleProps.reserved)) program.mangleProps.reserved = [];
+            if (typeof opts.mangleProps != "object") opts.mangleProps = {};
+            if (!Array.isArray(opts.mangleProps.reserved)) opts.mangleProps.reserved = [];
         }
         if (typeof options.mangle != "object") options.mangle = {};
-        options.mangle.properties = program.mangleProps;
+        options.mangle.properties = opts.mangleProps;
     }
-    if (program.nameCache) {
-        options.nameCache = JSON.parse(read_file(program.nameCache, "{}"));
+    if (opts.nameCache) {
+        options.nameCache = JSON.parse(read_file(opts.nameCache, "{}"));
     }
-    if (program.output == "ast") {
+    if (opts.output == "ast") {
         options.format = {
             ast: true,
             code: false
         };
     }
-    if (program.parse) {
-        if (!program.parse.acorn && !program.parse.spidermonkey) {
-            options.parse = program.parse;
-        } else if (program.sourceMap && program.sourceMap.content == "inline") {
+    if (opts.parse) {
+        if (!opts.parse.acorn && !opts.parse.spidermonkey) {
+            options.parse = opts.parse;
+        } else if (opts.sourceMap && opts.sourceMap.content == "inline") {
             fatal("ERROR: inline source map only works with built-in parser");
         }
     }
     if (~program.rawArgs.indexOf("--rename")) {
         options.rename = true;
-    } else if (!program.rename) {
+    } else if (!opts.rename) {
         options.rename = false;
     }
 
     let convert_path = name => name;
-    if (typeof program.sourceMap == "object" && "base" in program.sourceMap) {
+    if (typeof opts.sourceMap == "object" && "base" in opts.sourceMap) {
         convert_path = function() {
-            var base = program.sourceMap.base;
+            var base = opts.sourceMap.base;
             delete options.sourceMap.base;
             return function(name) {
                 return path.relative(base, name);
@@ -191,25 +201,25 @@
     }
 
     async function run_cli() {
-        var content = program.sourceMap && program.sourceMap.content;
+        var content = opts.sourceMap && opts.sourceMap.content;
         if (content && content !== "inline") {
             options.sourceMap.content = read_file(content, content);
         }
-        if (program.timings) options.timings = true;
+        if (opts.timings) options.timings = true;
 
         try {
-            if (program.parse) {
-                if (program.parse.acorn) {
+            if (opts.parse) {
+                if (opts.parse.acorn) {
                     files = convert_ast(function(toplevel, name) {
                         return require("acorn").parse(files[name], {
                             ecmaVersion: 2018,
                             locations: true,
                             program: toplevel,
                             sourceFile: name,
-                            sourceType: options.module || program.parse.module ? "module" : "script"
+                            sourceType: options.module || opts.parse.module ? "module" : "script"
                         });
                     });
-                } else if (program.parse.spidermonkey) {
+                } else if (opts.parse.spidermonkey) {
                     files = convert_ast(function(toplevel, name) {
                         var obj = JSON.parse(files[name]);
                         if (!toplevel) return obj;
@@ -253,7 +263,7 @@
             return;
         }
 
-        if (program.output == "ast") {
+        if (opts.output == "ast") {
             if (!options.compress && !options.mangle) {
                 result.ast.figure_out_scope({});
             }
@@ -287,7 +297,7 @@
                 }
                 return value;
             }, 2));
-        } else if (program.output == "spidermonkey") {
+        } else if (opts.output == "spidermonkey") {
             try {
                 const minified = await minify(
                     result.code,
@@ -306,16 +316,16 @@
                 fatal(ex);
                 return;
             }
-        } else if (program.output) {
-            fs.writeFileSync(program.output, result.code);
+        } else if (opts.output) {
+            fs.writeFileSync(opts.output, result.code);
             if (options.sourceMap && options.sourceMap.url !== "inline" && result.map) {
-                fs.writeFileSync(program.output + ".map", result.map);
+                fs.writeFileSync(opts.output + ".map", result.map);
             }
         } else {
             console.log(result.code);
         }
-        if (program.nameCache) {
-            fs.writeFileSync(program.nameCache, JSON.stringify(options.nameCache));
+        if (opts.nameCache) {
+            fs.writeFileSync(opts.nameCache, JSON.stringify(options.nameCache));
         }
         if (result.timings) for (var phase in result.timings) {
             print_error("- " + phase + ": " + result.timings[phase].toFixed(3) + "s");
